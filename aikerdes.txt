const config = require('./dbconfig');
const sql = require('mysql2/promise');

let pool = sql.createPool(config);

async function selectTermek() {
    try{ 
     const [rows] = await pool.query('select * from beer_database');
     return rows;
    }
    catch(error){
     throw error;
    } 
 }

 async function selectCard() {
    try{ 
     const [rows] = await pool.query('select Name, Price FROM beer_database');
     return rows;
    }
    catch(error){
     throw error;
    } 
 }

 async function selectUser (name, password) {
   console.log('Querying user with:', { name, password }); // Log the input values
   const query = 'SELECT * FROM buyer WHERE name = ? AND password = ?';
   const [result] = await pool.query(query, [name, password]); // Use pool.query instead of db.execute

   return result.length > 0 ? result[0] : null;
}

async function insertUser (name, email, password) {
   const query = 'INSERT INTO buyer (name, password, email) VALUES (?, ?, ?)';
   const [result] = await pool.query(query, [name, email, password]);
   return result;
}

async function updateUser (userId, mobile, countryAddress, cityAddress, houseAddress) {
   const query = `
       UPDATE buyer 
       SET mobile = ?, countryaddress = ?, cityaddress = ?, houseaddress = ? 
       WHERE id = ?`; // Assuming you have a unique identifier for the user, like 'id'
   
   const [result] = await pool.query(query, [mobile, countryAddress, cityAddress, houseAddress, userId]);
   return result;
}

module.exports = {
    selectTermek,
    selectCard,
    selectUser,
    insertUser,
    updateUser
}

This is the dboperations.js. This is where the async functions selectUser and updateUser are made.

var express = require('express');
var router = express.Router();
var Db = require('../db/dboperations');

// Get all products
router.get('/', async function(req, res, next) {
    try {
        const termek = await Db.selectTermek();
        res.json(termek);
    } catch (error) {
        res.status(500).send('Server error!');
    }
});

// Get card information
router.get('/card', async (req, res) => {
    try {
        const card = await Db.selectCard();
        res.json(card);
    } catch (error) {
        res.status(500).send('Server error!');
    }
});

// User authentication
router.get('/account', async function(req, res, next) {
    const { name, password } = req.query;
    console.log('Received:', { name, password });
    try {
        const user = await Db.selectUser (name, password);
        if (user) {
            res.json({ success: true });
        } else {
            res.status(401).json({ success: false });
        }
    } catch (error) {
        res.status(500).send('Server error!');
    }
});

// Sign up route
router.post('/signup', async (req, res) => {
    const { name, email, password } = req.body;

    
    try {
        await Db.insertUser (name,password,email); // Call the insertUser  function
        res.status(201).json({ success: true, message: 'User  created successfully' });
    } catch (error) {
        console.error('Error creating user:', error);
        res.status(400).json({ success: false, message: 'Error creating user' });
    }
});

router.put('/update', async (req, res) => {
    const { userId, mobile, countryAddress, cityAddress, houseAddress } = req.body;

    try {
        const result = await Db.updateUser (userId, mobile, countryAddress, cityAddress, houseAddress); // Call the updateUser  function
        if (result.affectedRows > 0) {
            res.json({ success: true, message: 'User  updated successfully' });
        } else {
            res.status(404).json({ success: false, message: 'User  not found' });
        }
    } catch (error) {
        console.error('Error updating user:', error);
        res.status(400).json({ success: false, message: 'Error updating user' });
    }
});

module.exports = router;

This is the termek.js where the routes are declared.
These were in the backend of our website.

import './App.css';
import 'bootstrap/dist/css/bootstrap.min.css';
import Menu from './components/Menu';
import Footer from './components/Footer';
import filmImage from './assets/background.webp';
import { BrowserRouter as Router, Route, Routes, useNavigate } from "react-router-dom";
import { useState, useEffect } from 'react';
import Home from './Home';
import Catalog from './catalog';
import SignUp from './signup';
import LogIn from './Login';
import UserProfile from './UserProfile';
import BeerInfo from './beerinfo';
import React from 'react';
import Rack from './Rack';

function App() {
    const [showModel, setShowModel] = useState(false);
    const [cart, setCart] = useState([]);
    const [user, setUser ] = useState(null); // State for the logged-in user
    const navigate = useNavigate();

    const handleOpenModel = () => {
        setShowModel(true);
        navigate("/login");
    };

    const handleCloseModel = () => {
        setShowModel(false);
        navigate("/");
    };

    const addToRack = (beer) => {
        setCart((prevCart) => {
            const existingBeer = prevCart.find(item => item.beer.Name === beer.Name);
            if (existingBeer) {
                return prevCart.map(item => item.beer.Name === beer.Name ? { ...item, quantity: item.quantity + 1 } : item);
            } else {
                return [...prevCart, { beer, quantity: 1 }];
            }
        });
    };

    const handleLogout = () => {
        console.log("Logging out...");
        setUser (null); // Clear the user state
        navigate('/'); // Navigate to the home page
    };

    const removeFromRack = (index) => {
        setCart((prevCart) => prevCart.filter((_, i) => i !== index));
    };

    const appStyle = { display: 'flex', flexDirection: 'column', minHeight: '100vh' };
    const mainStyle = { backgroundImage: `url(${filmImage})`, backgroundSize: 'cover', backgroundPosition: 'center', backgroundRepeat: 'no-repeat', flex: '1', padding: '20px', color: 'white' };

    return (
        <div style={appStyle}>
            <Menu user={user} handleLogout={handleLogout} /> {/* Pass user state and handleLogout to Menu */}
            <main style={mainStyle}>
                <Routes>
                    <Route path="/" element={<Home />} />
                    <Route path="/catalog" element={<Catalog addToRack={addToRack} />} />
                    <Route path="/signup" element={<SignUp />} />
                    <Route path="/login" element={<LogIn setUser ={setUser } />} /> {/* Pass setUser  to LogIn */}
                    <Route path="/userprofile" element={<UserProfile user={user} />} />
                    <Route path="/beer/:name" element={<BeerInfo addToRack={addToRack} />} />
                    <Route path="/rack" element={<Rack cart={cart} setCart={setCart} removeFromRack={removeFromRack} />} />
                </Routes>
            </main>
            <Footer />
        </div>
    );
}

export default App;

This is our App.js this is in our frontend. it handles the routes.

import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';

const Login = ({ setUser  }) => { // Accept setUser  as a prop
    const [name, setName] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const [success, setSuccess] = useState('');
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();

        try {
            const response = await axios.get('http://localhost:8080/termek/account', {
                params: {
                    name,
                    password,
                },
            });

            if (response.data.success) {
                setSuccess('Login Successful');
                setError('');
                setUser ({ name }); // Set the user state with the logged-in user's name
                navigate('/'); // Navigate to the home page or desired route
            } else {
                setError('Invalid username or password');
                setSuccess('');
            }
        } catch (error) {
            setError('An error occurred during login');
            setSuccess('');
            console.error('Login error:', error);
        }
    };

    return (
        <div style={{ maxWidth: '400px', margin: '0 auto', padding: '20px', border: '1px solid #ccc', borderRadius: '5px' }}>
            <h2>Login</h2>
            {error && <div style={{ color: 'red', marginBottom: '15px' }}>{error}</div>}
            {success && <div style={{ color: 'green', marginBottom: '15px' }}>{success}</div>}
            <form onSubmit={handleSubmit}>
                <div style={{ marginBottom: '15px' }}>
                    <label htmlFor="name">Name:</label>
                    <input
                        type="text"
                        id="name"
                        placeholder="Enter name"
                        value={name}
                        onChange={(e) => setName(e.target.value)}
                        required
                        style={{ width: '100%', padding: '8px', marginTop: '5px' }}
                    />
                </div>
                <div style={{ marginBottom: '15px' }}>
                    <label htmlFor="password">Password:</label>
                    <input
                        type="password"
                        id="password"
                        placeholder="Password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        required
                        style={{ width: '100%', padding: '8px', marginTop: '5px' }}
                    />
                </div>
                <button type="submit" style={{ padding: '10px 15px', backgroundColor: '#007BFF', color: '#fff', border: 'none', borderRadius: '5px' }}>
                    Login
                </button>
            </form>
            <p>
                Don't have an account? <Link to="/signup">Sign Up</Link>
            </p>
        </div>
    );
};

export default Login;

This is our login.js in it we get the user's data via the selectUser query.

What we need now is a UserProfile.js where a logged in user can update their profile. It needs to have 5 seperate input boxes for the 5 different datas that need to be updated in the buyer table.  Said boxes should also show the current data even if it's null. 